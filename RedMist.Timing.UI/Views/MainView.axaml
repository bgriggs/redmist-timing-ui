<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:vm="clr-namespace:RedMist.Timing.UI.ViewModels"
			 xmlns:design="clr-namespace:RedMist.Timing.UI.ViewModels.Design"
			 xmlns:v="clr-namespace:RedMist.Timing.UI.Views"
			 xmlns:vd="clr-namespace:RedMist.Timing.UI.Views.InCarDriverMode"
             mc:Ignorable="d" d:DesignWidth="350" d:DesignHeight="450"
             x:Class="RedMist.Timing.UI.Views.MainView"
             x:DataType="vm:MainViewModel">
	<Design.DataContext>
		<!-- This only sets the DataContext for the previewer in an IDE,
         to set the actual DataContext for runtime, set the DataContext property in code (look at App.axaml.cs) -->
		<design:DesignMainViewModel />
	</Design.DataContext>

	<UserControl.Resources>
		<x:Double x:Key="TabItemHeaderFontSize">13</x:Double>
		<!--<Thickness x:Key="TabItemHeaderMargin">5,1,1,1</Thickness>-->
	</UserControl.Resources>

	<Grid RowDefinitions="*" IsVisible="{Binding IsContentVisible}">
		<!--Event List-->
		<ContentControl IsVisible="{Binding IsEventsListVisible}">
			<v:EventsListView Name="eventsPage" DataContext="{Binding EventsListViewModel}"/>
		</ContentControl>

		<!--Timing tabs-->
		<TabControl Padding="0" TabStripPlacement="Bottom" IsVisible="{Binding IsTimingTabStripVisible}">
			<TabItem IsVisible="{Binding IsLiveTimingTabVisible}" IsSelected="{Binding IsLiveTimingTabSelected}">
				<TabItem.Header>
					<StackPanel Width="60">
						<PathIcon Height="15" Foreground="{DynamicResource IconButtonForegroundBrush}" Data="{StaticResource flaggeom}"/>
						<TextBlock Text="Live" HorizontalAlignment="Center"/>
					</StackPanel>
				</TabItem.Header>
				<v:LiveTimingView DataContext="{Binding LiveTimingViewModel}"></v:LiveTimingView>
			</TabItem>
			<TabItem Header="Results" IsSelected="{Binding IsResultsTabSelected}">
				<TabItem.Header>
					<StackPanel Width="60">
						<PathIcon Height="15" Margin="0,2,0,0" Foreground="{DynamicResource IconButtonForegroundBrush}" Data="{StaticResource trophygeom}">
							<PathIcon.RenderTransform>
								<RotateTransform Angle="180"/>
							</PathIcon.RenderTransform>
						</PathIcon>
						<TextBlock Text="Results" Margin="0,1,0,0" HorizontalAlignment="Center"/>
					</StackPanel>
				</TabItem.Header>
				<v:ResultsView DataContext="{Binding ResultsViewModel}"/>
			</TabItem>
			<TabItem Header="Information" IsSelected="{Binding IsInformationTabSelected}">
				<TabItem.Header>
					<StackPanel Width="60">
						<PathIcon Height="15" Margin="0,3,0,0" Foreground="{DynamicResource IconButtonForegroundBrush}" Data="{StaticResource infogeom}"/>
						<TextBlock Text="Info" Margin="0,1,0,0" HorizontalAlignment="Center"/>
					</StackPanel>
				</TabItem.Header>
				<v:EventInformationView DataContext="{Binding EventInformationViewModel}"/>
			</TabItem>
			<TabItem Header="Control Log" IsSelected="{Binding IsControlLogTabSelected}" IsVisible="{Binding IsControlLogTabVisible}">
				<TabItem.Header>
					<StackPanel Width="70">
						<PathIcon Height="15" Margin="0,2,0,0" Foreground="{DynamicResource IconButtonForegroundBrush}" Data="{StaticResource warninggeom}"/>
						<TextBlock Text="Control Log" Margin="0,1,0,0" HorizontalAlignment="Center"/>
					</StackPanel>
				</TabItem.Header>
				<v:ControlLogView DataContext="{Binding ControlLogViewModel}"/>
			</TabItem>
			<TabItem Header="Flags" IsVisible="{Binding IsFlagsTabVisible}" IsSelected="{Binding IsFlagsTabSelected}">
				<TabItem.Header>
					<StackPanel Width="60">
						<PathIcon Height="15" Margin="0,3,0,0" Foreground="{DynamicResource IconButtonForegroundBrush}" Data="{StaticResource flaggeom}"/>
						<TextBlock Text="Flags" Margin="0,1,0,0" HorizontalAlignment="Center"/>
					</StackPanel>
				</TabItem.Header>
				<v:FlagsView DataContext="{Binding FlagsViewModel}"/>
			</TabItem>
		</TabControl>

		<!--Driver Mode-->
		<ContentControl IsVisible="{Binding IsDriverModeVisible}">
			<vd:InCarSettings DataContext="{Binding InCarSettingsViewModel}" />
		</ContentControl>

		<!-- Optional Update Notification - Dismissible banner at top -->
		<Border IsVisible="{Binding IsUpdateNotificationVisible}"
		        Background="{DynamicResource OptionalUpdateBackgroundBrush}"
		        BorderBrush="{DynamicResource OptionalUpdateBorderBrush}"
		        BorderThickness="1"
		        CornerRadius="4"
		        Padding="15"
		        Margin="10,10,10,0"
		        VerticalAlignment="Top"
		        HorizontalAlignment="Stretch">
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto" />
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="Auto" />
					<ColumnDefinition Width="Auto" />
				</Grid.ColumnDefinitions>

				<!-- Icon -->
				<TextBlock Grid.Column="0"
				           Text="ℹ️"
				           FontSize="20"
				           VerticalAlignment="Center"
				           Margin="0,0,10,0" />

				<!-- Message -->
				<TextBlock Grid.Column="1"
				           Text="{Binding OptionalUpdateNotification.Message}"
				           TextWrapping="Wrap"
				           VerticalAlignment="Center" />

				<!-- Update Button -->
				<Button Grid.Column="2"
				        Content="Update"
				        Background="{DynamicResource OptionalUpdateButtonBackgroundBrush}"
				        Foreground="{DynamicResource OptionalUpdateButtonForegroundBrush}"
				        BorderThickness="0"
				        Padding="12,6"
				        Margin="0,0,10,0"
				        VerticalAlignment="Center"
				        Command="{Binding LaunchOptionalUpdateCommand}"
				        IsVisible="{Binding OptionalUpdateNotification.ActionUrl, Converter={x:Static StringConverters.IsNotNullOrEmpty}}"/>

				<!-- Close Button -->
				<Button Grid.Column="3"
				        Content="✕"
				        FontSize="16"
				        FontWeight="Bold"
				        Background="Transparent"
				        BorderThickness="0"
				        Padding="8,4"
				        VerticalAlignment="Center"
				        Command="{Binding DismissUpdateNotificationCommand}" />
			</Grid>
		</Border>

		<!-- Mandatory Update Overlay - Full screen blocking overlay -->
		<Border IsVisible="{Binding IsMandatoryUpdateVisible}"
		        Background="{DynamicResource MandatoryUpdateOverlayBackgroundBrush}"
		        HorizontalAlignment="Stretch"
		        VerticalAlignment="Stretch">
			<Border Background="{DynamicResource MandatoryUpdateDialogBackgroundBrush}"
			        BorderBrush="{DynamicResource MandatoryUpdateDialogBorderBrush}"
			        BorderThickness="2"
			        CornerRadius="8"
			        Padding="30"
			        MaxWidth="400"
			        MaxHeight="300"
			        HorizontalAlignment="Center"
			        VerticalAlignment="Center">
				<Grid>
					<Grid.RowDefinitions>
						<RowDefinition Height="Auto" />
						<RowDefinition Height="*" />
						<RowDefinition Height="Auto" />
					</Grid.RowDefinitions>

					<!-- Header -->
					<StackPanel Grid.Row="0" Margin="0,0,0,20">
						<TextBlock Text="⚠️ Update Required"
						           FontSize="18"
						           FontWeight="Bold"
						           HorizontalAlignment="Center"
						           TextWrapping="Wrap"/>
					</StackPanel>

					<!-- Message Content -->
					<ScrollViewer Grid.Row="1" Margin="0,0,0,20">
						<TextBlock Text="{Binding MandatoryUpdateResult.Message}"
						           TextWrapping="Wrap"
						           TextAlignment="Left"
						           VerticalAlignment="Top"/>
					</ScrollViewer>

					<!-- Action Button -->
					<StackPanel Grid.Row="2"
					            Orientation="Horizontal"
					            HorizontalAlignment="Center">
						<Button Content="Update Now"
						        Background="{DynamicResource MandatoryUpdateButtonBackgroundBrush}"
						        Foreground="{DynamicResource MandatoryUpdateButtonForegroundBrush}"
						        Padding="16,8"
						        Command="{Binding LaunchMandatoryUpdateCommand}"/>
					</StackPanel>
				</Grid>
			</Border>
		</Border>
	</Grid>
</UserControl>
